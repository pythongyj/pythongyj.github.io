[{"title":"Vue字体图标不显示的设置","date":"2019-03-20T16:00:00.000Z","path":"2019/03/21/iconfont/","text":"elementUI字体图标不显示 完美解决方案使用vue init webpack-simple xxx 创建的项目 在使用ElementUI的时候使用 字体图标时提示 根据报错提示可以看出时无法处理element-icons.ttf文件 原因时什么呢？ 相信大家都能够知道，这是因为webpack不知道怎么去处理.ttf的文件 这个时候我们就需要url-loader来帮助我们处理.ttf字体文件 1//这个时候需要我们去执行npm命令去下载url-loader2npm/cnpm install url-loader --save 下载完成后 去过你尝试去npm run dev 你会发现还是报和上面相同的错误，这是为什么呢？ 答案当然是因为你没有使用这个加载器（url-loader） 现在就需要你在webpack.config.js中去配置 这个配置说句实在的让小编好为难，因为一开始的时候咱也不知道该怎么配置啊，怎么办呢？ 这个时候度娘就显现出来了强大的威力，我开始了百度，看到别人的博客，知道了在rules下配置如下信息 1&#123;2 test: /\\.(woff2?|eot|ttf|otf)(\\?.*)?$/,3 loader: 'url-loader',4&#125; 别急着运行你的项目———这里有坑 看图 此图 是配置信息 此图是运行结果 此时你会发现 不报错了 但是我的图标去哪了？ 当时的小编也不知道啊 可能是被外星人给叼走了 哈哈 开个玩笑 经过小编的不懈努力 至于找到了问题的所在 这个因为没有设置limit选项 你可能会问这是什么东东 别急 先来和小编一起看看文档 看图可以看出 是要设置文件的大小的 这个属性的默认值是undefined 当然 小编怕你有疑问 再给你贴出一副图 这上面详细写了各个选项的具体功能 此时的你 应该已经很明确了问题原因的所在 和解决的办法 此时 就来看看我们伟大的成就吧 看图 配置 再来看运行的结果 如图： 此时，问题就完美解决了 如果能够帮助到你，是小编最大的荣幸 当然 有 不好的地方 请大家帮忙指出 学习永无止境 小编一直认为 人外有人 天外有天 一起学习 共同进步 让我们共同加油吧！！！","tags":[{"name":"javascript","slug":"javascript","permalink":"http://www.qcwy.org.cn/tags/javascript/"},{"name":"iconfont","slug":"iconfont","permalink":"http://www.qcwy.org.cn/tags/iconfont/"},{"name":"vue","slug":"vue","permalink":"http://www.qcwy.org.cn/tags/vue/"}]},{"title":"CommonJS, AMD, CMD的区别","date":"2018-08-15T10:54:07.000Z","path":"2018/08/15/amdcmdcom/","text":"CommonJS, AMD, CMD都是JS模块化的规范。CommonJS是服务器端js模块化的规范，NodeJS是这种规范的实现。AMD(异步模块定义)和CMD(通用模块定义)都是浏览器端js模块化的规范。RequireJS 遵循的是 AMD，SeaJS 遵循的是 CMD CommonJS（同步模块定义）一个单独的文件就是一个模块加载模块使用require方法，该方法读取一个文件并执行，最后返回文件内部的exports对象所以，定义一个模块就是写一个新的js文件，但是最后要将文件的内容exports出来 如何定义模块和加载模块？ 1//定义一个module.js文件2var A = function() &#123;3 console.log('我是定义的模块');4&#125;5/* 6 * 导出这个模块7 * 1.第一种返回方式 module.exports = A; 8 * 2.第二种返回方式 module.exports.test = A9 * 3.第三种返回方式 exports.test = A;10 * 注意：module.exports导出方式 与 exports导出方式是有区别的11 * 具体区别详见其他文章12 */13exports.test = A;1415//再写一个dome.js文件，导入刚才定义好的模块16const module = require(\"./module\"); //加载这个模块 require中是导入模块的路径 前面的变量名自定义 代表的是导入模块所导出的对象1718/* 调用这个模块，不同的返回方式用不同的方式调用19 * 1.第一种调用方式 module();20 * 2.第二种调用方式 module.test();21 */22module.test();232425/* 26 * 接下来我们去执行这个文件，前提是你本地要安装node.js27 * 首先打开cmd, cd到这个文件所在的目录下,执行: node dome.js28 */29node dome.js30//输出结果：我是定义的模块 以上就是CommonJS规范下的模块定义与加载的形式 注意： CommonJS 加载模块是同步的，所以只有加载完成才能执行后面的操作 ​ 因此 -&gt; 像Node.js比较适用CommonJS的原因在于：Node.js主要用于服务器的编程，加载的模块文件一般都已经存在本地硬盘，所以加载起来比较快，不用考虑异步加载的方式 ​ 而 -&gt; 浏览器环境 则 不适合适用CommonJS，原因在于浏览器环境要从服务器加载模块，这是就必须采用异步模式。所以就有了 AMD CMD 解决方案 AMD（异步模块定义）**AMD规范通过define方法去定义模块，通过require方法去加载模块。RequireJS实现了这种规范 AMD只有一个接口：define(id?,dependencies?,factory); 它要在声明模块的时候制定所有的依赖(dep)，并且还要当做形参传到factory中。要是没什么依赖，就定义简单的模块（或者叫独立的模块 1//编写一个module1.js文件2//定义独立的模块3define(&#123;4 methodA: function() &#123;5 console.log('我是module1的methodA'); 6 &#125;,7 methodB: function() &#123;8 console.log('我是module1的methodB'); 9 &#125;10&#125;);1112//编写一个module2.js文件13//另一种定义独立模块的方式14define(function () &#123;15 return &#123;16 methodA: function() &#123;17 console.log('我是module2的methodA'); 18 &#125;,19 methodB: function() &#123;20 console.log('我是module2的methodB'); 21 &#125;22 &#125;;23&#125;);2425//编写一个module3.js文件26//定义非独立的模块（这个模块依赖其他模块）27define(['module1', 'module2'], function(m1, m2) &#123;28 return &#123;29 methodC: function() &#123;30 m1.methodA();31 m2.methodB();32 &#125;33 &#125;;3435&#125;);3637//再定义一个main.js，去加载这些个模块38require(['module3'], function(m3)&#123;39 m3.methodC();40&#125;);4142//我们在一个html文件中去通过RequireJS加载这个main.js43//等号右边的main指的main.js44&lt;script data-main=\"main\" src=\"require.js\"&gt;&lt;/script&gt;4546//浏览器控制台输出结果47我是module1的methodA48我是module2的methodB CMD（通用模块定义）CMD是SeaJS 在推广过程中对模块定义的规范化产出 AMD和CMD的区别： 对于依赖的模块，AMD 是提前执行，CMD 是延迟执行。不过 RequireJS 从 2.0 开始，也改成可以延迟执行（根据写法不同，处理方式不同）。CMD 推崇 as lazy as possible（尽可能的懒加载，也称为延迟加载，即在需要的时候才加载）。 CMD 推崇依赖就近，AMD 推崇依赖前置。虽然 AMD 也支持 CMD 的写法，同时还支持将 require 作为依赖项传递，但 RequireJS 的作者默认是最喜欢上面的写法，也是官方文档里默认的模块定义写法。 AMD 的 API 默认是一个当多个用，CMD 的 API 严格区分，推崇职责单一。比如 AMD 里，require 分全局 require 和局部 require，都叫 require。CMD 里，没有全局 require，而是根据模块系统的完备性，提供 seajs.use 来实现模块系统的加载启动。CMD 里，每个 API 都简单纯粹。 注意：部分文章可能会在不就的将来更新 如果能够帮助到你，是小编最大的荣幸 当然 有 不好的地方 请大家帮忙指出 学习永无止境 小编一直认为 人外有人 天外有天 一起学习 共同进步 让我们共同加油吧！！！","tags":[{"name":"common.js","slug":"common-js","permalink":"http://www.qcwy.org.cn/tags/common-js/"},{"name":"cmd","slug":"cmd","permalink":"http://www.qcwy.org.cn/tags/cmd/"},{"name":"amd","slug":"amd","permalink":"http://www.qcwy.org.cn/tags/amd/"}]},{"title":"前端规范","date":"2018-04-15T00:54:07.000Z","path":"2018/04/15/norm/","text":"前端规范 命名规则 头 : header 内容 : content/container 尾部 : footer 导航 : nav 侧栏 : sidebar 栏目 : column 外围盒子控制整体布局 : wrapper 左 右 中 : left / center / right 登录条 : loginbar 标志 : logo 广告 : banner 页面主题 : main 热点 : hot 新闻 : news 下载 : download 子导航 : subnav 菜单 : menu 子菜单 : submenu 搜索 : search 友情链接 : friendlink 页脚 : footer 版权 : copyright 滚动 : scroll 内容 : content 标签页 : tab 文章列表 : list 提示信息 : msg 小技巧 : tips 栏目标题 : title 加入 : joinus 指南 : guild 服务 : service 注册 : regsiter 状态 : status 投票 : vote 合作伙伴 : partner 注释的写法 1/*Footer Start*/2内容区3/*Footer End*/ id的命名 3.1 页面结果 容器 : container 页头 : header 内容 : content / container 页面主体 : main 页尾 : footer 导航 : nav 侧栏 : sidebar 栏目 : column 页面外围控制整体布局宽度 : wrapper 左右中 : left / right / center 3.2 导航 导航 : nav 主导航 : mainbav 子导航 : subnav 顶导航 : topnav 边导航 : sidebar 左导航 : leftsidebar 右导航 : rightsidebar 菜单 : menu 子菜单 : submenu 标题 : title 摘要 : summary 3.3 功能 标志 : logo 广告 : banner 登陆 : login 登录条 : loginbar 注册 : regsiter 搜索 : search 功能区 : shop 标题 : title 加入 : joinus 状态 : status 按钮 : btn 滚动 : scroll 标签页 : tab 文章列表 : list 提示信息 : msg 当前的 : current 小技巧 : tips 图标 : icon 注释 : note 指南 : guild 服务 : service 热点 : hot 新闻 : news 下载 : download 投票 : vote 合作伙伴 : partner 友情链接 : link 版权 : copyright css样式 4.1 重置默认样式 4.2 添加自定义全局样式 4.3 抽取文件定义单页面全局样式 4.3 样式定义规则 ： 重定义 &gt; 伪类 &gt; 自定义 （便于阅读） javascript 书写规范 5.1 书写过程 ：每行代码结束结构统一（有无分号-&gt;有的话，每行代码都应该有-&gt; eslint 设置规则，遵守即可）。防止代码冗余 | 与不小心造成与远程代码造成冲突 5.2 库的引入 ：根据项目需求，尽量的少引入。引入的时候，尽量使用按需引入，节省资源 5.3 变量命名规则 ：驼峰式命名法 5.4 类命名 : 首字母大写, 驼峰式命名 5.5 函数命名: 首字母小写驼峰式命名 5.6 命名语义化, 尽可能利用英文单词或其缩写 5.7 尽量避免使用存在兼容性及消耗资源的方法或属性, 比如eval() &amp;; innerText 5.8 后期优化中, JavaScript非注释类中文字符须转换成unicode编码使用, 以避免编码错误时乱码显示; 5.9 代码结构明了, 加适量注释. 提高函数重用率 5.10 注重 样式 结构 行为 相分离 图片规范 6.1 所有页面元素类图片均放入img文件夹 6.2 图片格式仅限于gif || png || jpg 6.3 命名全部用小写英文字母 || 数字 || _ 的组合,其中不得包含汉字 || 空格 || 特殊字符;尽量用易懂的词汇, 便于团队其他成员理解; 另, 命名分头尾两部分, 用下划线隔开, 比如ad_left01.gif || btn_submit.gif 6.4 在保证视觉效果的情况下选择最小的图片格式与图片质量, 以减少加载时间 6.5 尽量避免使用半透明的png图片(若使用, 请参考css规范相关说明) 6.6 运用css sprite技术集中小的背景图或图标, 减小页面http请求, 但注意, 请务必在对应的sprite psd源图中划参考线, 并保存至img目录下 注释规范 7.1 html注释: 注释格式&lt; !–这儿是注释–&gt;, ‘–’只能在注释的始末位置,不可置入注释文字区域 7.2 css注释: 注释格式 /*这儿是注释*/ 7.3 JavaScript注释, 单行注释使用’//这儿是单行注释’ ,多行注释使用 /* 这儿有多行注释 */ 结束语 如果能够帮助到你，是小编最大的荣幸 当然 有 不好的地方 请大家帮忙指出 学习永无止境 小编一直认为 人外有人 天外有天 一起学习 共同进步 让我们共同加油吧！！！","tags":[{"name":"javascript","slug":"javascript","permalink":"http://www.qcwy.org.cn/tags/javascript/"}]},{"title":"Html基础知识学习总结","date":"2017-08-15T10:54:07.000Z","path":"2017/08/15/starthtml/","text":"Html基础知识学习总结Html基础标签 &lt;h1&gt;&lt;/h1&gt;:标题&lt;p&gt;&lt;/p&gt; 段落&lt;hr&gt;水平线&lt;br&gt;换行&lt;span&gt;&lt;/span&gt;分区，可多标签一行&lt;div&gt;&lt;/div&gt;分区，每个标签一行 文本格式化标签 加粗 斜体 删除 &lt;/ins 下划线 图像标签 属性 alt 图片不能显示时的替代文本 title 鼠标悬停时显示 height 图像高度 width 图像宽度 border 图像边框宽度 超链接标签 href =url 链接的地址target _blank 新窗口打开 &lt;base&gt; &lt;base target=&quot;_blank&quot;&gt; 设置超链接的共有属性 预格式化文本 &lt;pre&gt; &lt;/pre&gt; 预格式化文本 保留空格与换行 常用特殊字符1空字符 &amp;nbsp;2注册商标 &amp;reg;3&lt; &amp;lt;4&gt; &amp;gt; 5&amp; &amp;amp; 表格表格数据格式1&lt;body&gt;2&lt;!-- 表格标签--&gt;3 &lt;table border=\"1\"&gt;4 &lt;!--表格标题标签 即表头--&gt;5 &lt;caption&gt;表格标题&lt;/caption&gt;6 &lt;!--行标签--&gt;7 &lt;tr&gt;8 &lt;!--表头单元格,文字居中且加粗--&gt;9 &lt;th&gt;&lt;/th&gt;10 &lt;/tr&gt;11 &lt;tr&gt;12 &lt;!--单元格标签--&gt;13 &lt;td&gt;&lt;/td&gt;14 &lt;/tr&gt;15 &lt;/table&gt;16&lt;/body&gt; 表格属性 border 边框width 宽度height 高度align 设置表格在网页中水平对齐方式 left center right cellspacing 单元格与单元格之间距离 cellpadding 单元格内容与边框的距离 合并单元格行 rowspan=”合并单元格的个数 “ 列 colspan=”合并单元格个数” 合并的方式 先确认跨行还是跨列 根据 先上 后下 先左 后右的原则找到目标单元格 ，然后写上合并方式 和合并数量 删除多余的单元格 语义化结构划分1&lt;thead&gt;&lt;/thead&gt; 表的头部 内部必须拥有&lt;tr&gt;标签2&lt;tbody&gt;&lt;/tbody&gt; 表的主体3&lt;tfoot&gt;&lt;/tfoot&gt; 表的末尾4 注意：结构不是必须的 即使不写，绝大多数浏览器在解析的时候，都会智能的给你加上 列表分类 有序列表 无序列表 自定义列表 有序列表1&lt;ol&gt;2 &lt;li&gt;列表项&lt;/li&gt;3 &lt;li&gt;列表项&lt;/li&gt;4&lt;/ol&gt;5注意：实际中很少使用有序列表，在做一些列表的时候，大家都比较喜欢使用无序列表。因为ul标签里面只能嵌套li标签6 一般在使用列表的时候都会去除别表的默认样式，再根据自己的需求去使用css js 去定制自己需要的样式和交互 无序列表1&lt;ul&gt;2 &lt;!--ul内只能嵌套li--&gt;3 &lt;li&gt;列表项1 &lt;/li&gt;4 &lt;li&gt;列表项2&lt;/li&gt;5&lt;/ul&gt;6注意：一般的列表，都喜欢使用 无序列表 自定义列表1&lt;dl&gt;2 &lt;dt&gt;名词&lt;/dt&gt;3 &lt;dd&gt;名词的解释1&lt;/dd&gt;4 &lt;dd&gt;名词的解释2&lt;/dd&gt;5 &lt;dt&gt;名词2&lt;/dt&gt;6 &lt;dd&gt;名词2的解释2&lt;dd&gt;7&lt;/dl&gt;8注意：自定义标签一般都用在页面结尾的友情链接部分 就是 页面的 footer部分 表单 这里写具体的表单标签 // from表单用于提交数据 有action method name属性 表单标签 标签 语法&lt;input type=&quot;属性值&quot;/&gt; 属性值 type text 单行文本输入框 password 密码输入框 radio 单选按钮 checkbox 复选框 button 普通按钮 submit 提交按钮 reset 重置按钮 image 图像形式的提交按钮 file 文件域 name 控件的名称 value input控件中的默认文本值 size input控件在页面中的显示宽度 checked 表示默认选中状态 &lt;label&gt;&lt;/label&gt;标签 用户名： 用户名： &lt;textarea&gt;&lt;/textarea&gt; 文本域select下拉列表1&lt;select&gt;2 &lt;option&gt;--请选择--&lt;/option&gt;3 &lt;!--添加默认选中项--&gt;4 &lt;option selected=\"selected\"&gt;选项１&lt;/option&gt;5 &lt;option&gt;选项２&lt;/option&gt;6&lt;/select&gt; 注意：部分文章可能会在不就的将来更新 如果能够帮助到你，是小编最大的荣幸 当然 有 不好的地方 请大家帮忙指出 学习永无止境 小编一直认为 人外有人 天外有天 一起学习 共同进步 让我们共同加油吧！！！","tags":[{"name":"html","slug":"html","permalink":"http://www.qcwy.org.cn/tags/html/"}]}]